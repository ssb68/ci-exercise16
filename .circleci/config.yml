version: 2.1
  

commands:
  # Exercise - Rollback
  destroy_environment:
    parameters:
      stackId:
        type: string
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stackId >>
            
# Define the jobs we want to run for this project
jobs:
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if you wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket 
  # to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" 

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Add TAR
            # because for some unkown reason the AWS image does not have tar and iots need to use workspace file sharing
            command: |
              yum install -y tar gzip
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name ${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1
        - run:
            name: Get IP
            command: |
              echo [all] > inventory.txt
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Project,Values=Ex16" \
                --output text > inv.txt
              cat inv.txt >> inventory.txt 
        - persist_to_workspace:
            root: .
            paths:
              - inventory.txt
              - inv.txt
        - destroy_environment:
            stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  # Exercise: Config and Deployment
  configure_infrastructure: 
      docker:
        - image: python:3.9.0-alpine
        #        python:3.7-alpine3.11 
      steps:
        - checkout
        - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["10:61:99:49:c2:88:81:f1:58:05:48:92:68:52:af:18"] 
        - run:
            name: Install dependencies
            command: |
              # Install Ansible
              apk add --update ansible
        - attach_workspace:
            at: . 
        - run:
            name: Run Playbook and Configure server
            command: |
              # Your command
              pwd
              ls -ltr
              cat inventory.txt
              ansible-playbook -i inventory.txt playbook.yml
        - destroy_environment:
            stackId: ${CIRCLE_WORKFLOW_ID:0:7}

  # Exercise: Smoke Testing
  smoke_test:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Add TAR
            # because for some unkown reason the AWS image does not have tar and iots need to use workspace file sharing
            command: |
              yum install -y tar gzip
        - run:
            name: Add curl
            command: |
              yum install -y curl
        - attach_workspace:
            at: . 
        - run:
            name: smoke test
            command: |
              pwd
              ls -ltr 
              cat inv.txt
              DNS=`(cat inv.txt)`
              URL="http://${DNS}:3000/"
              # Test if website exists
              if curl -s --head ${URL} 
              then
                return 0
              else
                return 1
              fi
        - destroy_environment:
            stackId: ${CIRCLE_WORKFLOW_ID:0:7}

# Sequential workflow
workflows:
  my_workflow:
    jobs:
      #- create_infrastructure
      #- configure_infrastructure:
      #    requires:
      #      - create_infrastructure
      #- smoke_test:
      #    requires:
      #      - configure_infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production