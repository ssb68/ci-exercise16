version: 2.1


commands:
  # Exercise - Rollback
  destroy_environment:
  #    docker:
  #      - image: amazon/aws-cli
      steps:
  #      - checkout
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
#            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Add TAR
            # because for some unkown reason the AWS image does not have tar and iots need to use workspace file sharing
            command: |
              yum install -y tar gzip
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
        - run:
            name: Get IP
            command: |
              echo [all] > inventory.txt
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Project,Values=Ex16" \
                --output text > inv.txt
              cat inv.txt >> inventory.txt 
        - persist_to_workspace:
            root: .
            paths:
              - inventory.txt
              - inv.txt

  # Exercise: Config and Deployment
  configure_infrastructure: 
      docker:
        - image: python:3.7-alpine3.11 
      steps:
        - checkout
        - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["10:61:99:49:c2:88:81:f1:58:05:48:92:68:52:af:18"] 
        - run:
            name: Install dependencies
            command: |
              # Install Ansible
              apk add --update ansible
        - attach_workspace:
            at: . 
        - run:
            name: Run Playbook and Configure server
            command: |
              # Your command
              pwd
              ls -ltr
              cat inventory.txt
              ansible-playbook -i inventory.txt playbook.yml

   # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - attach_workspace:
          at: . 
      - run:
          name: smoke test
          command: |
            pwd
            ls -ltr 
            cat inv.txt
            DNS=`(cat inv.txt)`
            URL="http://${DNS}:3000/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
          when: on_fail

# Sequential workflow
workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure